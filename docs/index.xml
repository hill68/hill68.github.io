<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FlitSoft Docs</title><link>https://hill68.github.io/index.html</link><description>UASUAV flight simulation
EMThis is a new chapter.
electromagnetic
AGIThis is a new chapter.
GamingThis is a new chapter.
C2This is a new chapter.
SimulationThis is a new chapter.
JSBSim User manual用户手册 https://jsbsim-team.github.io/jsbsim-reference-manual/
本部分解释了如何使用 JSBSim 进行模拟运行、创建飞行器模型、编写脚本，以及如何执行其他不涉及对 JSBSim 程序代码进行更改的任务。
JSBSim 软件提供了许多现成可用的飞行器模型示例。一旦用户熟悉了进行模拟所需的所有步骤和设置，可能会希望查看这些示例，并详细了解更有经验的 JSBSim 用户是如何实现某些特定模型的。
该项目和发行版中包含的飞行器模型不包含任何专有、敏感或机密数据。所有数据均来源于教材（如 Stevens 和 Lewis 的《Aircraft Control and Simulation》以及 Sutton 的《Rocket Propulsion Elements》）、公开的技术报告（见：NASA技术报告网站和AIAA网站），或其他公开数据（如FAA网站）。JSBSim 发行版中包含的飞行器模型，以及与现有商业或军事飞行器名称相对应的模型，都是基于公开信息制作的近似模型，仅供教育或娱乐使用。
概述 什么是 JSBSim？ 从应用程序编程的角度来看，JSBSim 是一个主要用 C++ 编程语言编写的程序代码集合（其中包括一些 C 语言例程）。组成 JSBSim 的一些 C++ 类用于建模物理实体，如大气、飞行控制系统或引擎。某些类封装了诸如运动方程、矩阵、四元数或向量等概念或数学构造。一些类管理其他对象的集合。总的来说，JSBSim 应用程序接受控制输入，计算并汇总来自这些控制输入和环境的力矩，并在离散时间步中推进飞行器的状态（速度、方位、位置等）。</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 21 May 2025 15:44:38 +0800</lastBuildDate><atom:link href="https://hill68.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>UAS</title><link>https://hill68.github.io/uas/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hill68.github.io/uas/index.html</guid><description>UAV flight simulation</description></item><item><title>EM</title><link>https://hill68.github.io/em/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hill68.github.io/em/index.html</guid><description>This is a new chapter.
electromagnetic</description></item><item><title>AGI</title><link>https://hill68.github.io/agi/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hill68.github.io/agi/index.html</guid><description>This is a new chapter.</description></item><item><title>Gaming</title><link>https://hill68.github.io/gaming/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hill68.github.io/gaming/index.html</guid><description>This is a new chapter.</description></item><item><title>C2</title><link>https://hill68.github.io/c2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hill68.github.io/c2/index.html</guid><description>This is a new chapter.</description></item><item><title>Simulation</title><link>https://hill68.github.io/simu/index.html</link><pubDate>Wed, 21 May 2025 15:44:38 +0800</pubDate><guid>https://hill68.github.io/simu/index.html</guid><description>This is a new chapter.
JSBSim User manual用户手册 https://jsbsim-team.github.io/jsbsim-reference-manual/
本部分解释了如何使用 JSBSim 进行模拟运行、创建飞行器模型、编写脚本，以及如何执行其他不涉及对 JSBSim 程序代码进行更改的任务。
JSBSim 软件提供了许多现成可用的飞行器模型示例。一旦用户熟悉了进行模拟所需的所有步骤和设置，可能会希望查看这些示例，并详细了解更有经验的 JSBSim 用户是如何实现某些特定模型的。
该项目和发行版中包含的飞行器模型不包含任何专有、敏感或机密数据。所有数据均来源于教材（如 Stevens 和 Lewis 的《Aircraft Control and Simulation》以及 Sutton 的《Rocket Propulsion Elements》）、公开的技术报告（见：NASA技术报告网站和AIAA网站），或其他公开数据（如FAA网站）。JSBSim 发行版中包含的飞行器模型，以及与现有商业或军事飞行器名称相对应的模型，都是基于公开信息制作的近似模型，仅供教育或娱乐使用。
概述 什么是 JSBSim？ 从应用程序编程的角度来看，JSBSim 是一个主要用 C++ 编程语言编写的程序代码集合（其中包括一些 C 语言例程）。组成 JSBSim 的一些 C++ 类用于建模物理实体，如大气、飞行控制系统或引擎。某些类封装了诸如运动方程、矩阵、四元数或向量等概念或数学构造。一些类管理其他对象的集合。总的来说，JSBSim 应用程序接受控制输入，计算并汇总来自这些控制输入和环境的力矩，并在离散时间步中推进飞行器的状态（速度、方位、位置等）。
JSBSim 已经在各种平台上构建和运行，如 Windows 或 Linux 系统上的 PC、苹果 Macintosh 以及硅谷图形公司的 IRIX 操作系统。自由的 GNU g++ 编译器可以轻松编译 JSBSim，其他如 Borland 和 Microsoft 的编译器也能很好地工作。更多信息请参见《程序员指南》。
从最终用户的角度来看（例如进行研究的学生），JSBSim 可以被视为一个“黑箱”，它通过 XML 格式的输入文件进行提供。这些 XML 文件包含了航天器、引擎、脚本等的描述。当这些文件被加载到 JSBSim 中时，它们指示 JSBSim 模拟该飞行器的飞行情况，作为更大仿真框架的一部分（例如 FlightGear 或 OpenEaagles），或者在批处理模式下以比实际时间更快的速度运行。每次运行 JSBSim 都会生成包含模拟飞行器性能和动态数据的文件。</description></item><item><title>Visualization</title><link>https://hill68.github.io/visual/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hill68.github.io/visual/index.html</guid><description>This is a new chapter.</description></item><item><title>Log</title><link>https://hill68.github.io/log/index.html</link><pubDate>Tue, 20 May 2025 11:13:37 +0800</pubDate><guid>https://hill68.github.io/log/index.html</guid><description>基于运动基元的A*算法12 3
将基于运动基元的A*算法从四旋翼无人机改进适配到固定翼无人机 参考的基于运动基元的四旋翼无人机A*算法：
https://github.com/HKUST-Aerial-Robotics/Fast-Planner/blob/master/fast_planner/path_searching/src/kinodynamic_astar.cpp
总体思路
分析四旋翼A*算法的核心部分：了解其状态表示、控制输入、运动模型和运动基元生成方式。
理解固定翼无人机的动力学特性：明确其状态变量、控制输入、运动学/动力学模型，以及物理和操作限制。
整合调整：在前两步的基础上，重新定义状态和控制输入，修改运动基元生成方法，调整启发式函数和代价函数，确保算法的合理性和可行性。
1. 四旋翼A*算法概述 1.1 状态表示
位置：$\mathbf{p} = [x, y, z]^T$ 速度：$\mathbf{v} = [v_x, v_y, v_z]^T$ 状态向量：$\mathbf{s} = [\mathbf{p}, \mathbf{v}]^T$，共6维。 1.2 控制输入
加速度：$\mathbf{a} = [a_x, a_y, a_z]^T$ 控制输入集：在最大加速度范围内进行离散化，生成一系列可能的加速度向量。 1.3 运动模型
假设加速度在时间段$\tau$内恒定，使用匀加速运动方程进行状态转移： $$ \begin{cases} \mathbf{p}(t+\tau) = \mathbf{p}(t) + \mathbf{v}(t) \tau + \frac{1}{2} \mathbf{a} \tau^2 \\ \mathbf{v}(t+\tau) = \mathbf{v}(t) + \mathbf{a} \tau \end{cases} $$1.4 运动基元生成
对控制输入$\mathbf{a}$和持续时间$\tau$进行离散化，生成一系列可能的运动基元。 在节点扩展时，应用这些运动基元进行状态转移，生成新节点。 2. 固定翼无人机动力学特性 2.1 状态表示
位置：$\mathbf{p} = [x, y, z]^T$ 航向角：$\chi$（水平面内的方向） 俯仰角（航迹角）：$\gamma$（垂直方向的角度） 速度大小：$v$（通常假设恒定或在一定范围内） 状态向量：$\mathbf{s} = [x, y, z, \chi, \gamma]^T$，共5维。 2.2 控制输入</description></item></channel></rss>