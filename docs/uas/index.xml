<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>UAS :: FlitSoft Docs</title><link>https://hill68.github.io/uas/index.html</link><description>无人机系统仿真与建模</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 23 May 2025 17:07:50 +0800</lastBuildDate><atom:link href="https://hill68.github.io/uas/index.xml" rel="self" type="application/rss+xml"/><item><title>Aerodynamics</title><link>https://hill68.github.io/uas/fix_wing_uav_flight_sim/index.html</link><pubDate>Fri, 23 May 2025 17:07:50 +0800</pubDate><guid>https://hill68.github.io/uas/fix_wing_uav_flight_sim/index.html</guid><description>小型固定翼无人机飞行动力学模型为小型固定翼无人机仿真系统提供逼真的飞行动力学与飞行控制方案，替代当前的简单PID+运动学模型。文档涵盖系统需求、6-DOF动力学模型、级联控制架构、模块接口、参数标定及实现建议等内容。
JSBSim User manual如何使用 JSBSim 进行模拟运行、创建飞行器模型、编写脚本，以及如何执行其他不涉及对 JSBSim 程序代码进行更改的任务。
JSBSim Quickstart旨在让用户和开发者了解JSBSim软件的所有功能。</description></item><item><title>Path Searching</title><link>https://hill68.github.io/uas/path-searching/index.html</link><pubDate>Tue, 20 May 2025 11:13:37 +0800</pubDate><guid>https://hill68.github.io/uas/path-searching/index.html</guid><description>A* Path Searching 基于运动基元的A*算法将基于运动基元的A*算法从四旋翼无人机改进适配到固定翼无人机</description></item><item><title>Formation Control</title><link>https://hill68.github.io/uas/formation-control/index.html</link><pubDate>Wed, 21 May 2025 17:07:50 +0800</pubDate><guid>https://hill68.github.io/uas/formation-control/index.html</guid><description>基于非线性模型预测控制的无人机编队飞行在非线性模型预测控制（NMPC）框架下设计了一种分布式、无碰撞的编队飞行控制律。编队构型在虚拟参考点坐标系中确定。通过代价惩罚实现避障，通过代价惩罚结合新的优先级策略实现机间防碰撞。
无人机集群固定阵型轨迹生成模型生成集群中每个无人机形成固定阵型的期望轨迹</description></item><item><title>Velocity Planning</title><link>https://hill68.github.io/uas/velocity_plan/index.html</link><pubDate>Wed, 21 May 2025 17:07:50 +0800</pubDate><guid>https://hill68.github.io/uas/velocity_plan/index.html</guid><description>三段S曲线速度规划模型旨在为无人机轨迹规划提供一条平滑的 S 曲线速度规划方案。通过先计算变速（过渡）阶段的 S 曲线段，再补充恒速段（定速阶段），最后利用二分查找方法调整期望速度以匹配目标弧长，从而生成一组离散时间点上的速度、加速度和加加速度数据。</description></item><item><title>Trajectory Planning</title><link>https://hill68.github.io/uas/trajectory_planning/index.html</link><pubDate>Wed, 21 May 2025 17:07:50 +0800</pubDate><guid>https://hill68.github.io/uas/trajectory_planning/index.html</guid><description>kappa-trajectories κ轨迹平滑κ轨迹生成算法。κ=1：轨迹以最短时间过渡到下一个航段；κ=0：轨迹执行一个最小时间过渡，并直接通过航路点；求解κ∈[0,1]使轨迹具有与原始航路点路径等长
κ轨迹点生成代码说明针对模块化的κ轨迹点生成 C++ 代码的详细说明。用于在给定 κ∈ [0,1] 的条件下，在航路点之间生成平滑的 κ-轨迹点。
无人机实时动态轨迹平滑一种实时、可行的轨迹生成算法，用于无人机通过一系列航路点飞行。 特别地，算法可配置为动态可行轨迹与直线航路点路径具有相同的路径长度。 该文还详细描述了与算法相关的实现问题。
等长轨迹κ求解算法设计一种基于二分查找的数值方法，用以求解参数 κ，从而使得生成的 κ-轨迹路径长度与原始航路点路径长度完全一致。
Cubic Polynomial Curve 用于轨迹规划的三次样条插值针对轨迹规划问题，详细阐述了如何利用三次多项式样条插值构造一条平滑连续的轨迹曲线。
轨迹管理的几个关键问题一、航路连接点的问题 在无人机任务规划中能够统一 线型航路（航点+连线）、区域绕飞（盘旋、跑道型、8字形盘旋） 和 区域覆盖（往复飞行） 的规划，合理设计航路连接点至关重要。航路连接点不仅作为不同航路类型之间的桥梁，还需要满足不同航路间的无缝衔接以及符合无人机运动学、动力学约束的要求。设置和给出航路连接点成为关键。
1. 航路连接点的定义 航路连接点（waypoints）是指航路中定义的关键点，用于标记航路的起点、终点、转折点等。根据不同类型的航路，连接点的功能可以有所不同，通常包括：
航点连接点：用于定义直线路径的起点和终点。 区域连接点：用于定义区域（绕飞或覆盖区域）的边界或者中心点。 转弯连接点：用于平滑转弯或连接不同航路片段。 2. 航路连接点设计的关键要素 航路连接点的设计要考虑以下几个因素：
2.1 航点与区域绕飞之间的连接 绕飞区域的转接点：在从直线路径进入绕飞区域时，必须在区域的边界或合适的位置设置一个连接点。通常，绕飞区域的起始和结束连接点会设计为圆形、跑道型或8字形的入口点。 平滑过渡：确保航路连接点的设置能够让飞行器平稳过渡到绕飞模式，例如使用平滑的曲线路径连接点。 2.2 航路之间的连接 航点到航点：简单的直线路径，航点之间的连接是直接的。 航点到区域（绕飞或覆盖）：需要设计连接点，使得从航点飞行过渡到区域覆盖或绕飞时，路径符合运动学和动力学约束。 2.3 区域绕飞到区域覆盖的连接 区域的边界连接点：当无人机从绕飞区域过渡到区域覆盖时，需要设置连接点在区域边界，并根据需要设置扫描间距或覆盖模式。 2.4 路径平滑性 平滑连接点：在设计航路连接点时，要避免急转弯、突兀的路径变换，特别是在速度较快时。通常使用插值方法（如B样条）来平滑连接点之间的路径。 3. 航路连接点的类型 根据航路的类型，设计不同类型的连接点：
3.1 航点连接点（WAYPOINT） 用于定义航路的关键位置，通常由 GPS 坐标（经度、纬度、高度）和时间戳组成。 可以用于直线路径（航点之间的连线）。 class Waypoint: def __init__(self, id, position, timestamp=None): self.id = id self.position = position # (x, y, z) self.timestamp = timestamp # 到达此航点的时间 3.2 区域边界连接点（AREA BOUNDARY） 用于定义区域绕飞和覆盖的边界点。包括多边形的顶点坐标或圆形区域的中心与半径。 对于绕飞路径，需要定义起始点、结束点以及是否需要平滑过渡。 class AreaBoundary: def __init__(self, boundary_type, points=None, center=None, radius=None): self.boundary_type = boundary_type # 'polygon' 或 'circle' self.points = points # 多边形的顶点坐标 self.center = center # 圆形区域的中心点 self.radius = radius # 圆形区域的半径 3.3 转弯连接点（TURN POINT） 用于描述航路的转弯点。在多个航路片段连接时，转弯连接点可以通过插值方法平滑路径，减少急转弯的影响。 class TurnPoint: def __init__(self, position, curvature=None): self.position = position # 转弯点位置 self.curvature = curvature # 转弯的曲率（可选） 4. 设计不同航路类型的连接点 4.1 线型航路（航点+连线） 线型航路的连接点包括：</description></item></channel></rss>